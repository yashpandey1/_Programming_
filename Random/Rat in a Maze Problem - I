class Solution{
    public:
    
    bool is_safe(int x, int y, vector<vector<int>>& visited, vector<vector<int>> &m,int n)
    {
        if((x>=0 and x<n) && (y>=0 and y<n) && visited[x][y]==0 && m[x][y]==1) return true;
        else return false;
    }
    
    void solve(vector<vector<int>> &m, int n, vector<string>& ans,int x, int y,vector<vector<int>>& visited, string s)
    {
        //base case
        if(x==n-1 and y==n-1){
            ans.push_back(s);
            return;
        }
        
        visited[x][y]=1;
        int newx;
        int newy;
        
        //down condition
        newx = x+1;
        newy = y;
        if(is_safe(newx, newy, visited, m, n))
        {
            s.push_back('D');
            solve(m, n, ans, newx, newy, visited, s);
            s.pop_back();
        }
        
        //up condition
        newx = x+-1;
        newy = y;
        if(is_safe(newx, newy, visited, m, n))
        {
            s.push_back('U');
            solve(m, n, ans, newx, newy, visited, s);
            s.pop_back();
        }
        
        //right condition
        newx = x;
        newy = y+1;
        if(is_safe(newx, newy, visited, m,n))
        {
            s.push_back('R');
            solve(m, n, ans, newx, newy, visited, s);
            s.pop_back();
        }
        
       //left condition
        newx = x;
        newy = y-1;
        if(is_safe(newx, newy, visited, m, n ))
        {
            s.push_back('L');
            solve(m, n, ans, newx, newy, visited, s);
            s.pop_back();
        }
        
        visited[x][y]=0;
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<int>> visited(n, vector<int>(n,0));
        vector<string> ans;
        if(m[0][0]==0) return ans;
        solve(m, n, ans, 0, 0, visited, "");
        sort(ans.begin(), ans.end());
        return ans;
        
    }
};
