class Solution {
public:

    int ans = -1;
    int dfs(int node, vector<int> &edges, unordered_map<int, int> &dist,vector<bool> &visited )
    {
        visited[node] = true;
        int neighbour = edges[node];

        if(neighbour!=-1 && !visited[neighbour]){
            dist[neighbour] = dist[node] + 1;
            dfs(neighbour, edges, dist, visited);
        }
        else if((neighbour!=-1) &&  dist.count(neighbour)){
            ans = max(ans, dist[node] + 1 - dist[neighbour]);
        }
        return ans;
}

    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<bool> visited(n);

        for(int i = 0 ; i < n ; i++ )
        {
            if(!visited[i]){
                unordered_map<int, int> dist;
                dist[i]=1;
                dfs(i, edges, dist, visited);
            }
        }
        return ans; 
    }
};
