class Solution {
public:

    int help(vector<int>& coins, int amount, int index, int n, vector<vector<int>> &dp)
    {
        if( index >= n || amount<=0 )
        {
            if(amount==0) return 0;
            else return INT_MAX-1;
        }

        if(dp[index][amount]!=-1) return dp[index][amount];

        int take = 1 + help(coins, amount-coins[index], index, n, dp);
        int nottake = help(coins, amount, index+1, n, dp);

        return dp[index][amount] = min(take, nottake);
    }

    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(13, vector<int> (10000+1,-1));
        if(help(coins, amount, 0, n, dp) == INT_MAX-1) return -1;
        else return help(coins, amount, 0, n, dp);
    }
};
