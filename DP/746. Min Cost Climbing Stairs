class Solution {
public:

    //Recursion solution.

    // int help( vector<int> &dp, vector<int> cost, int n)
    // {
    //     if( n==0 ) return cost[0];
    //     else if( n==1 ) return cost[1];
    //     else if( dp[n]!=-1 ) return dp[n];
    //     else return dp[n] = cost[n] + min(help(dp, cost, n-1), help(dp, cost, n-2));
    // }

    int minCostClimbingStairs(vector<int>& cost) {
        vector<int> dp(cost.size()+1, -1);
        int n = cost.size();
        dp[0]= cost[0];
        dp[1]=cost[1];
        for( int i = 2 ; i < n ; i++ )
        {
            dp[i]=cost[i]+min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-2], dp[n-1]);
    }
};
